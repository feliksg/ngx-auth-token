{"version":3,"file":"ngx-token-auth.es5.js","sources":["~/@twimco/ngx-token-auth/ngx-token-auth.ts","~/@twimco/ngx-token-auth/src/auth-token.module.ts","~/@twimco/ngx-token-auth/src/auth-token.interceptor.ts","~/@twimco/ngx-token-auth/src/auth-token.service.ts","~/@twimco/ngx-token-auth/src/auth-token.options.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf, Provider, InjectionToken } from '@angular/core';\nimport { AuthTokenInterceptor } from './auth-token.interceptor';\nimport { AuthTokenService } from './auth-token.service';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AuthTokenOptions } from './auth-token.model';\nimport { AUTH_TOKEN_OPTIONS } from './auth-token.options';\n\nexport * from './auth-token.interceptor';\nexport * from './auth-token.service';\nexport * from './auth-token.model';\nexport * from './auth-token.options';\n\n\nexport interface TokenAuthModuleOptions {\n  authTokenOptionsProvider?: Provider;\n  config?: AuthTokenOptions;\n}\n\n@NgModule()\nexport class AuthTokenModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: AuthTokenModule) {\n    if (parentModule) {\n      throw new Error('AuthTokenModule is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n\n  static forRoot(options: TokenAuthModuleOptions): ModuleWithProviders {\n    return {\n      ngModule: AuthTokenModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AuthTokenInterceptor,\n          multi: true\n        },\n        options.authTokenOptionsProvider ||\n        {\n          provide: AUTH_TOKEN_OPTIONS,\n          useValue: options.config\n        },\n        AuthTokenService\n      ]\n    };\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { AuthTokenService } from './auth-token.service';\n\n@Injectable()\nexport class AuthTokenInterceptor implements HttpInterceptor {\n  constructor(public authTokenService: AuthTokenService ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.authTokenService.setCurrentAuthHeaders();\n\n    const authHeaders = this.authTokenService.currentAuthHeaders;\n    authHeaders.keys().forEach((key) => req.headers.append(key, authHeaders.get(key)));\n\n    const authReq = req.clone({ headers: req.headers });\n\n    return next.handle(authReq);\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/operator/pluck';\nimport 'rxjs/add/operator/filter';\n\nimport {\n  SignInData,\n  RegisterData,\n  UpdatePasswordData,\n  ResetPasswordData,\n\n  UserType,\n  UserData,\n  AuthData,\n\n  AuthTokenOptions,\n  RequestOptions\n} from './auth-token.model';\nimport { AUTH_TOKEN_OPTIONS } from './auth-token.options';\n\n@Injectable()\nexport class AuthTokenService implements CanActivate {\n  defaultOptions: AuthTokenOptions = {\n    apiPath:                    null,\n    apiBase:                    null,\n\n    signInPath:                 'auth/sign_in',\n    signInRedirect:             null,\n    signInStoredUrlStorageKey:  null,\n\n    signOutPath:                'auth/sign_out',\n    validateTokenPath:          'auth/validate_token',\n    signOutFailedValidate:      false,\n\n    registerAccountPath:        'auth',\n    deleteAccountPath:          'auth',\n    registerAccountCallback:    window.location.href,\n\n    updatePasswordPath:         'auth',\n\n    resetPasswordPath:          'auth/password',\n    resetPasswordCallback:      window.location.href,\n\n    userTypes:                  null,\n\n    oAuthBase:                  window.location.origin,\n    oAuthPaths: {\n      github:                   'auth/github'\n    },\n    oAuthCallbackPath:          'oauth_callback',\n    oAuthWindowType:            'newWindow',\n    oAuthWindowOptions:         null,\n\n    globalOptions: {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept':       'application/json'\n      }\n    }\n  };\n\n  get currentUserType(): string {\n    if (this.atCurrentUserType != null) {\n      return this.atCurrentUserType.name;\n    } else {\n      return null;\n    }\n  }\n\n  get currentUserData(): UserData {\n    return this.atCurrentUserData;\n  }\n\n  get currentAuthData(): AuthData {\n    return this.atCurrentAuthData;\n  }\n\n  get currentAuthHeaders(): HttpHeaders {\n    if (this.atCurrentAuthData != null) {\n      return new HttpHeaders({\n        'access-token': this.atCurrentAuthData.accessToken,\n        'client':       this.atCurrentAuthData.client,\n        'expiry':       this.atCurrentAuthData.expiry,\n        'token-type':   this.atCurrentAuthData.tokenType,\n        'uid':          this.atCurrentAuthData.uid\n      });\n    }\n\n    return new HttpHeaders;\n  }\n\n  private atOptions: AuthTokenOptions;\n  private atCurrentUserType: UserType;\n  private atCurrentAuthData: AuthData;\n  private atCurrentUserData: UserData;\n\n  constructor(\n    @Inject(HttpClient) private http: HttpClient,\n    @Inject(AUTH_TOKEN_OPTIONS) config: AuthTokenOptions,\n    @Optional() @Inject(ActivatedRoute) private activatedRoute: ActivatedRoute,\n    @Optional() @Inject(Router) private router: Router\n  ) {\n    if (config) {\n      this.atOptions = (<any>Object).assign(this.defaultOptions, config);\n    }\n  }\n\n  userSignedIn(): boolean {\n    return !!this.atCurrentAuthData;\n  }\n\n  canActivate(): boolean {\n    if (this.userSignedIn()) {\n      return true;\n    } else {\n      // Store current location in storage (usefull for redirection after signing in)\n      if (this.atOptions.signInStoredUrlStorageKey) {\n        localStorage.setItem(\n          this.atOptions.signInStoredUrlStorageKey,\n          window.location.pathname + window.location.search\n        );\n      }\n\n      // Redirect user to sign in if signInRedirect is set\n      if (this.router && this.atOptions.signInRedirect) {\n        this.router.navigate([this.atOptions.signInRedirect]);\n      }\n\n      return false;\n    }\n  }\n\n  // Inital configuration\n  init(options?: AuthTokenOptions) {\n    this.atOptions = (<any>Object).assign(this.defaultOptions, options);\n    this.tryLoadAuthData();\n  }\n\n  /**\n   *\n   * Actions\n   *\n   */\n\n  // Register request\n  registerAccount(registerData: RegisterData): Observable<Response> {\n    if (registerData.userType == null) {\n      this.atCurrentUserType = null;\n    } else {\n      this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n      delete registerData.userType;\n    }\n\n    registerData.password_confirmation  = registerData.passwordConfirmation;\n    delete registerData.passwordConfirmation;\n\n    registerData.confirm_success_url    = this.atOptions.registerAccountCallback;\n\n    return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n  }\n\n  // Delete Account\n  deleteAccount(): Observable<Response> {\n    return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);\n  }\n\n  // Sign in request and set storage\n  signIn(signInData: SignInData): Observable<Response> {\n    if (signInData.userType == null) {\n      this.atCurrentUserType = null;\n    } else {\n      this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n    }\n\n    const body = JSON.stringify({\n      email:      signInData.email,\n      password:   signInData.password\n    });\n\n    const observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);\n\n    observ.subscribe(res => this.atCurrentUserData = res.json().data, _error => null);\n\n    return observ;\n  }\n\n  signInOAuth(oAuthType: string) {\n    const oAuthPath: string = this.getOAuthPath(oAuthType);\n    const callbackUrl = '${window.location.origin}/${this.atOptions.oAuthCallbackPath}';\n    const oAuthWindowType: string = this.atOptions.oAuthWindowType;\n    const authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n    if (oAuthWindowType === 'newWindow') {\n      const oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n      let windowOptions = '';\n\n      if (oAuthWindowOptions) {\n        for (const key in oAuthWindowOptions) {\n          windowOptions += ',${key}=${oAuthWindowOptions[key]}';\n        }\n      }\n\n      const popup = window.open(\n        authUrl,\n        '_blank',\n        'closebuttoncaption=Cancel${windowOptions}'\n      );\n      return this.requestCredentialsViaPostMessage(popup);\n    } else if (oAuthWindowType === 'sameWindow') {\n      window.location.href = authUrl;\n    } else {\n      throw 'Unsupported oAuthWindowType \"${oAuthWindowType}\"';\n    }\n  }\n\n  processOAuthCallback(): void {\n    this.getAuthDataFromParams();\n  }\n\n  // Sign out request and delete storage\n  signOut(): Observable<Response> {\n    const observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);\n\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('client');\n    localStorage.removeItem('expiry');\n    localStorage.removeItem('tokenType');\n    localStorage.removeItem('uid');\n\n    this.atCurrentAuthData = null;\n    this.atCurrentUserType = null;\n    this.atCurrentUserData = null;\n\n    return observ;\n  }\n\n  // Validate token request\n  validateToken(): Observable<Response> {\n    const observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);\n\n    observ.subscribe(\n      res => this.atCurrentUserData = res.json().data,\n      error => {\n        if (error.status === 401 && this.atOptions.signOutFailedValidate) {\n          this.signOut();\n        }\n      });\n\n    return observ;\n  }\n\n  // Update password request\n  updatePassword(updatePasswordData: UpdatePasswordData): Observable<Response> {\n    if (updatePasswordData.userType != null) {\n      this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n    }\n\n    let args: any;\n\n    if (updatePasswordData.passwordCurrent == null) {\n      args = {\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    } else {\n      args = {\n        current_password:       updatePasswordData.passwordCurrent,\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    }\n\n    if (updatePasswordData.resetPasswordToken) {\n      args.reset_password_token = updatePasswordData.resetPasswordToken;\n    }\n\n    const body = JSON.stringify(args);\n    return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);\n  }\n\n  // Reset password request\n  resetPassword(resetPasswordData: ResetPasswordData): Observable<Response> {\n\n    if (resetPasswordData.userType == null) {\n      this.atCurrentUserType = null;\n    } else {\n      this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n    }\n\n    const body = JSON.stringify({\n      email:          resetPasswordData.email,\n      redirect_url:   this.atOptions.resetPasswordCallback\n    });\n\n    return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);\n  }\n\n  /**\n   *\n   * HTTP Wrappers\n   *\n   */\n\n  get(url: string, options?: RequestOptions): Observable<any> {\n    const response = this.http.get(this.getApiPath() + url, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  post(url: string, body: any, options?: RequestOptions): Observable<any> {\n    const response = this.http.post(this.getApiPath() + url, body, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  put(url: string, body: any, options?: RequestOptions): Observable<any> {\n    const response = this.http.put(this.getApiPath() + url, body, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  delete(url: string, options?: RequestOptions): Observable<any> {\n    const response = this.http.delete(this.getApiPath() + url, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  patch(url: string, body: any, options?: RequestOptions): Observable<any> {\n    const response = this.http.patch(this.getApiPath() + url, body, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  head(url: string, options?: RequestOptions): Observable<any> {\n    const response = this.http.head(this.getApiPath() + url, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  options(url: string, options?: RequestOptions): Observable<any> {\n    const response = this.http.options(this.getApiPath() + url, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  setCurrentAuthHeaders(): HttpHeaders {\n    // Get auth data from local storage\n    this.getAuthDataFromStorage();\n\n    // Get auth data from query params to override local storage data\n    this.getAuthDataFromParams();\n\n    const headers: HttpHeaders = new HttpHeaders();\n\n    // Merge auth headers to request if set\n    if (this.atCurrentAuthData != null) {\n      headers.append('access-token', this.atCurrentAuthData.accessToken);\n      headers.append('client', this.atCurrentAuthData.client);\n      headers.append('expiry', this.atCurrentAuthData.expiry);\n      headers.append('token-type', this.atCurrentAuthData.tokenType);\n      headers.append('uid', this.atCurrentAuthData.uid);\n    }\n\n    Object.keys(this.atOptions.globalOptions.headers).forEach(\n      (key) => headers.append(key, this.atOptions.globalOptions.headers[key])\n    );\n\n    return headers;\n  }\n\n  // // Construct and send Http request\n  // request(options: RequestOptionsArgs): Observable<Response> {\n  //\n  //     let baseRequestOptions: RequestOptions;\n  //     let baseHeaders:        { [key:string]: string; } = this.atOptions.globalOptions.headers;\n  //\n  //     // Get auth data from local storage\n  //     this.getAuthDataFromStorage();\n  //\n  //     // Merge auth headers to request if set\n  //     if (this.atCurrentAuthData != null) {\n  //         (<any>Object).assign(baseHeaders, {\n  //             'access-token': this.atCurrentAuthData.accessToken,\n  //             'client':       this.atCurrentAuthData.client,\n  //             'expiry':       this.atCurrentAuthData.expiry,\n  //             'token-type':   this.atCurrentAuthData.tokenType,\n  //             'uid':          this.atCurrentAuthData.uid\n  //         });\n  //     }\n  //\n  //     baseRequestOptions = new RequestOptions({\n  //         headers: new Headers(baseHeaders)\n  //     });\n  //\n  //     // Merge standard and custom RequestOptions\n  //     baseRequestOptions = baseRequestOptions.merge(options);\n  //\n  //     let response = this.http.request(new Request(baseRequestOptions)).share();\n  //     this.handleResponse(response);\n  //\n  //     return response;\n  // }\n  //\n  // private mergeRequestOptionsArgs(options: RequestOptionsArgs, addOptions?: RequestOptionsArgs): RequestOptionsArgs {\n  //\n  //     let returnOptions: RequestOptionsArgs = options;\n  //\n  //     if (options)\n  //         (<any>Object).assign(returnOptions, addOptions);\n  //\n  //     return returnOptions;\n  // }\n\n  // Check if response is complete and newer, then update storage\n  private handleResponse(request: Observable<any>): void {\n    request.subscribe(res => {\n      this.getAuthHeadersFromResponse(<any>res);\n    }, error => {\n      this.getAuthHeadersFromResponse(<any>error);\n    });\n  }\n\n  /**\n   *\n   * Get Auth Data\n   *\n   */\n\n  // Try to load auth data\n  private tryLoadAuthData(): void {\n\n    const userType = this.getUserTypeByName(localStorage.getItem('userType'));\n\n    if (userType) {\n      this.atCurrentUserType = userType;\n    }\n\n    this.getAuthDataFromStorage();\n\n    if (this.activatedRoute) {\n      this.getAuthDataFromParams();\n    }\n\n    if (this.atCurrentAuthData) {\n      this.validateToken();\n    }\n  }\n\n  // Parse Auth data from response\n  private getAuthHeadersFromResponse(data: any): void {\n    const headers = data.headers;\n    const authData: AuthData = {\n      accessToken:    headers.get('access-token'),\n      client:         headers.get('client'),\n      expiry:         headers.get('expiry'),\n      tokenType:      headers.get('token-type'),\n      uid:            headers.get('uid')\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Parse Auth data from post message\n  private getAuthDataFromPostMessage(data: any): void {\n    const authData: AuthData = {\n      accessToken:    data['auth_token'],\n      client:         data['client_id'],\n      expiry:         data['expiry'],\n      tokenType:      'Bearer',\n      uid:            data['uid']\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Try to get auth data from storage.\n  private getAuthDataFromStorage(): void {\n    const authData: AuthData = {\n      accessToken:    localStorage.getItem('accessToken'),\n      client:         localStorage.getItem('client'),\n      expiry:         localStorage.getItem('expiry'),\n      tokenType:      localStorage.getItem('tokenType'),\n      uid:            localStorage.getItem('uid')\n    };\n\n    if (this.checkAuthData(authData)) {\n      this.atCurrentAuthData = authData;\n    }\n  }\n\n  // Try to get auth data from url parameters.\n  private getAuthDataFromParams(): void {\n    if (this.activatedRoute.queryParams) { // Fix for Testing, needs to be removed later\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        const authData: AuthData = {\n          accessToken: queryParams['token'] || queryParams['auth_token'],\n          client: queryParams['client_id'],\n          expiry: queryParams['expiry'],\n          tokenType: 'Bearer',\n          uid: queryParams['uid']\n        };\n\n        if (this.checkAuthData(authData)) {\n          this.atCurrentAuthData = authData;\n        }\n      });\n    }\n  }\n\n  /**\n   *\n   * Set Auth Data\n   *\n   */\n\n  // Write auth data to storage\n  private setAuthData(authData: AuthData): void {\n    if (this.checkAuthData(authData)) {\n      this.atCurrentAuthData = authData;\n\n      localStorage.setItem('accessToken', authData.accessToken);\n      localStorage.setItem('client', authData.client);\n      localStorage.setItem('expiry', authData.expiry);\n      localStorage.setItem('tokenType', authData.tokenType);\n      localStorage.setItem('uid', authData.uid);\n\n      if (this.atCurrentUserType != null) {\n        localStorage.setItem('userType', this.atCurrentUserType.name);\n      }\n    }\n  }\n\n  /**\n   *\n   * Validate Auth Data\n   *\n   */\n\n  // Check if auth data complete and if response token is newer\n  private checkAuthData(authData: AuthData): boolean {\n    if (\n      authData.accessToken != null &&\n      authData.client != null &&\n      authData.expiry != null &&\n      authData.tokenType != null &&\n      authData.uid != null\n    ) {\n      if (this.atCurrentAuthData != null) {\n        return authData.expiry >= this.atCurrentAuthData.expiry;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   *\n   * Construct Paths / Urls\n   *\n   */\n\n  private getUserPath(): string {\n    if (this.atCurrentUserType == null) {\n      return '';\n    } else {\n      return this.atCurrentUserType.path + '/';\n    }\n  }\n\n  private getApiPath(): string {\n    let constructedPath = '';\n\n    if (this.atOptions.apiBase != null) {\n      constructedPath += this.atOptions.apiBase + '/';\n    }\n\n    if (this.atOptions.apiPath != null) {\n      constructedPath += this.atOptions.apiPath + '/';\n    }\n\n    return constructedPath;\n  }\n\n  private getOAuthPath(oAuthType: string): string {\n    let oAuthPath: string;\n\n    oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n\n    if (oAuthPath == null) {\n      oAuthPath = '/auth/${oAuthType}';\n    }\n\n    return oAuthPath;\n  }\n\n  private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n    let url: string;\n\n    url =   '${this.atOptions.oAuthBase}/${oAuthPath}';\n    url +=  '?omniauth_window_type=${windowType}';\n    url +=  '&auth_origin_url=${encodeURIComponent(callbackUrl)}';\n\n    if (this.atCurrentUserType != null) {\n      url += '&resource_class=${this.atCurrentUserType.name}';\n    }\n\n    return url;\n  }\n\n  /**\n   *\n   * OAuth\n   *\n   */\n\n  private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n    const pollerObserv = Observable.interval(500);\n\n    const responseObserv = Observable.fromEvent(window, 'message').pluck('data')\n      .filter(this.oAuthWindowResponseFilter);\n\n    const responseSubscription = responseObserv.subscribe(\n      this.getAuthDataFromPostMessage.bind(this)\n    );\n\n    const pollerSubscription = pollerObserv.subscribe(() => {\n      if (authWindow.closed) {\n        pollerSubscription.unsubscribe();\n      } else {\n        authWindow.postMessage('requestCredentials', '*');\n      }\n    });\n\n    return responseObserv;\n  }\n\n  private oAuthWindowResponseFilter(data: any): any {\n    if (data.message === 'deliverCredentials' || data.message === 'authFailure') {\n      return data;\n    }\n  }\n\n  /**\n   *\n   * Utilities\n   *\n   */\n\n  // Match user config by user config name\n  private getUserTypeByName(name: string): UserType {\n    if (name == null || this.atOptions.userTypes == null) {\n      return null;\n    }\n\n    return this.atOptions.userTypes.find(\n      userType => userType.name === name\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const AUTH_TOKEN_OPTIONS = new InjectionToken('AUTH_TOKEN_OPTIONS');\n"],"names":["__metadata","__decorate","__param","Observable","router","http"],"mappings":"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"}
