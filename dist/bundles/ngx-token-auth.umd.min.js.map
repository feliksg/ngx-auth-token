{"version":3,"file":"ngx-token-auth.umd.min.js","sources":["~/@twimco/ngx-token-auth/src/auth-token.options.ts","~/@twimco/ngx-token-auth/src/auth-token.service.ts","~/@twimco/ngx-token-auth/src/auth-token.interceptor.ts","~/@twimco/ngx-token-auth/src/auth-token.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const AUTH_TOKEN_OPTIONS = new InjectionToken('AUTH_TOKEN_OPTIONS');\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/operator/pluck';\nimport 'rxjs/add/operator/filter';\n\nimport {\n  SignInData,\n  RegisterData,\n  UpdatePasswordData,\n  ResetPasswordData,\n\n  UserType,\n  UserData,\n  AuthData,\n\n  AuthTokenOptions,\n  RequestOptions\n} from './auth-token.model';\nimport { AUTH_TOKEN_OPTIONS } from './auth-token.options';\n\n@Injectable()\nexport class AuthTokenService implements CanActivate {\n  defaultOptions: AuthTokenOptions = {\n    apiPath:                    null,\n    apiBase:                    null,\n\n    signInPath:                 'auth/sign_in',\n    signInRedirect:             null,\n    signInStoredUrlStorageKey:  null,\n\n    signOutPath:                'auth/sign_out',\n    validateTokenPath:          'auth/validate_token',\n    signOutFailedValidate:      false,\n\n    registerAccountPath:        'auth',\n    deleteAccountPath:          'auth',\n    registerAccountCallback:    window.location.href,\n\n    updatePasswordPath:         'auth',\n\n    resetPasswordPath:          'auth/password',\n    resetPasswordCallback:      window.location.href,\n\n    userTypes:                  null,\n\n    oAuthBase:                  window.location.origin,\n    oAuthPaths: {\n      github:                   'auth/github'\n    },\n    oAuthCallbackPath:          'oauth_callback',\n    oAuthWindowType:            'newWindow',\n    oAuthWindowOptions:         null,\n\n    globalOptions: {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept':       'application/json'\n      }\n    }\n  };\n\n  get currentUserType(): string {\n    if (this.atCurrentUserType != null) {\n      return this.atCurrentUserType.name;\n    } else {\n      return null;\n    }\n  }\n\n  get currentUserData(): UserData {\n    return this.atCurrentUserData;\n  }\n\n  get currentAuthData(): AuthData {\n    return this.atCurrentAuthData;\n  }\n\n  get currentAuthHeaders(): HttpHeaders {\n    if (this.atCurrentAuthData != null) {\n      return new HttpHeaders({\n        'access-token': this.atCurrentAuthData.accessToken,\n        'client':       this.atCurrentAuthData.client,\n        'expiry':       this.atCurrentAuthData.expiry,\n        'token-type':   this.atCurrentAuthData.tokenType,\n        'uid':          this.atCurrentAuthData.uid\n      });\n    }\n\n    return new HttpHeaders;\n  }\n\n  private atOptions: AuthTokenOptions;\n  private atCurrentUserType: UserType;\n  private atCurrentAuthData: AuthData;\n  private atCurrentUserData: UserData;\n\n  constructor(\n    @Inject(HttpClient) private http: HttpClient,\n    @Inject(AUTH_TOKEN_OPTIONS) config: AuthTokenOptions,\n    @Optional() @Inject(ActivatedRoute) private activatedRoute: ActivatedRoute,\n    @Optional() @Inject(Router) private router: Router\n  ) {\n    if (config) {\n      this.atOptions = (<any>Object).assign(this.defaultOptions, config);\n    }\n  }\n\n  userSignedIn(): boolean {\n    return !!this.atCurrentAuthData;\n  }\n\n  canActivate(): boolean {\n    if (this.userSignedIn()) {\n      return true;\n    } else {\n      // Store current location in storage (usefull for redirection after signing in)\n      if (this.atOptions.signInStoredUrlStorageKey) {\n        localStorage.setItem(\n          this.atOptions.signInStoredUrlStorageKey,\n          window.location.pathname + window.location.search\n        );\n      }\n\n      // Redirect user to sign in if signInRedirect is set\n      if (this.router && this.atOptions.signInRedirect) {\n        this.router.navigate([this.atOptions.signInRedirect]);\n      }\n\n      return false;\n    }\n  }\n\n  // Inital configuration\n  init(options?: AuthTokenOptions) {\n    this.atOptions = (<any>Object).assign(this.defaultOptions, options);\n    this.tryLoadAuthData();\n  }\n\n  /**\n   *\n   * Actions\n   *\n   */\n\n  // Register request\n  registerAccount(registerData: RegisterData): Observable<Response> {\n    if (registerData.userType == null) {\n      this.atCurrentUserType = null;\n    } else {\n      this.atCurrentUserType = this.getUserTypeByName(registerData.userType);\n      delete registerData.userType;\n    }\n\n    registerData.password_confirmation  = registerData.passwordConfirmation;\n    delete registerData.passwordConfirmation;\n\n    registerData.confirm_success_url    = this.atOptions.registerAccountCallback;\n\n    return this.post(this.getUserPath() + this.atOptions.registerAccountPath, JSON.stringify(registerData));\n  }\n\n  // Delete Account\n  deleteAccount(): Observable<Response> {\n    return this.delete(this.getUserPath() + this.atOptions.deleteAccountPath);\n  }\n\n  // Sign in request and set storage\n  signIn(signInData: SignInData): Observable<Response> {\n    if (signInData.userType == null) {\n      this.atCurrentUserType = null;\n    } else {\n      this.atCurrentUserType = this.getUserTypeByName(signInData.userType);\n    }\n\n    const body = JSON.stringify({\n      email:      signInData.email,\n      password:   signInData.password\n    });\n\n    const observ = this.post(this.getUserPath() + this.atOptions.signInPath, body);\n\n    observ.subscribe(res => this.atCurrentUserData = res.json().data, _error => null);\n\n    return observ;\n  }\n\n  signInOAuth(oAuthType: string) {\n    const oAuthPath: string = this.getOAuthPath(oAuthType);\n    const callbackUrl = '${window.location.origin}/${this.atOptions.oAuthCallbackPath}';\n    const oAuthWindowType: string = this.atOptions.oAuthWindowType;\n    const authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType);\n\n    if (oAuthWindowType === 'newWindow') {\n      const oAuthWindowOptions = this.atOptions.oAuthWindowOptions;\n      let windowOptions = '';\n\n      if (oAuthWindowOptions) {\n        for (const key in oAuthWindowOptions) {\n          windowOptions += ',${key}=${oAuthWindowOptions[key]}';\n        }\n      }\n\n      const popup = window.open(\n        authUrl,\n        '_blank',\n        'closebuttoncaption=Cancel${windowOptions}'\n      );\n      return this.requestCredentialsViaPostMessage(popup);\n    } else if (oAuthWindowType === 'sameWindow') {\n      window.location.href = authUrl;\n    } else {\n      throw 'Unsupported oAuthWindowType \"${oAuthWindowType}\"';\n    }\n  }\n\n  processOAuthCallback(): void {\n    this.getAuthDataFromParams();\n  }\n\n  // Sign out request and delete storage\n  signOut(): Observable<Response> {\n    const observ = this.delete(this.getUserPath() + this.atOptions.signOutPath);\n\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('client');\n    localStorage.removeItem('expiry');\n    localStorage.removeItem('tokenType');\n    localStorage.removeItem('uid');\n\n    this.atCurrentAuthData = null;\n    this.atCurrentUserType = null;\n    this.atCurrentUserData = null;\n\n    return observ;\n  }\n\n  // Validate token request\n  validateToken(): Observable<Response> {\n    const observ = this.get(this.getUserPath() + this.atOptions.validateTokenPath);\n\n    observ.subscribe(\n      res => this.atCurrentUserData = res.json().data,\n      error => {\n        if (error.status === 401 && this.atOptions.signOutFailedValidate) {\n          this.signOut();\n        }\n      });\n\n    return observ;\n  }\n\n  // Update password request\n  updatePassword(updatePasswordData: UpdatePasswordData): Observable<Response> {\n    if (updatePasswordData.userType != null) {\n      this.atCurrentUserType = this.getUserTypeByName(updatePasswordData.userType);\n    }\n\n    let args: any;\n\n    if (updatePasswordData.passwordCurrent == null) {\n      args = {\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    } else {\n      args = {\n        current_password:       updatePasswordData.passwordCurrent,\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    }\n\n    if (updatePasswordData.resetPasswordToken) {\n      args.reset_password_token = updatePasswordData.resetPasswordToken;\n    }\n\n    const body = JSON.stringify(args);\n    return this.put(this.getUserPath() + this.atOptions.updatePasswordPath, body);\n  }\n\n  // Reset password request\n  resetPassword(resetPasswordData: ResetPasswordData): Observable<Response> {\n\n    if (resetPasswordData.userType == null) {\n      this.atCurrentUserType = null;\n    } else {\n      this.atCurrentUserType = this.getUserTypeByName(resetPasswordData.userType);\n    }\n\n    const body = JSON.stringify({\n      email:          resetPasswordData.email,\n      redirect_url:   this.atOptions.resetPasswordCallback\n    });\n\n    return this.post(this.getUserPath() + this.atOptions.resetPasswordPath, body);\n  }\n\n  /**\n   *\n   * HTTP Wrappers\n   *\n   */\n\n  get(url: string, options?: RequestOptions): Observable<any> {\n    const response = this.http.get(this.getApiPath() + url, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  post(url: string, body: any, options?: RequestOptions): Observable<any> {\n    const response = this.http.post(this.getApiPath() + url, body, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  put(url: string, body: any, options?: RequestOptions): Observable<any> {\n    const response = this.http.put(this.getApiPath() + url, body, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  delete(url: string, options?: RequestOptions): Observable<any> {\n    const response = this.http.delete(this.getApiPath() + url, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  patch(url: string, body: any, options?: RequestOptions): Observable<any> {\n    const response = this.http.patch(this.getApiPath() + url, body, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  head(url: string, options?: RequestOptions): Observable<any> {\n    const response = this.http.head(this.getApiPath() + url, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  options(url: string, options?: RequestOptions): Observable<any> {\n    const response = this.http.options(this.getApiPath() + url, options).share();\n    this.handleResponse(response);\n    return response;\n  }\n\n  setCurrentAuthHeaders(): HttpHeaders {\n    // Get auth data from local storage\n    this.getAuthDataFromStorage();\n\n    // Get auth data from query params to override local storage data\n    this.getAuthDataFromParams();\n\n    const headers: HttpHeaders = new HttpHeaders();\n\n    // Merge auth headers to request if set\n    if (this.atCurrentAuthData != null) {\n      headers.append('access-token', this.atCurrentAuthData.accessToken);\n      headers.append('client', this.atCurrentAuthData.client);\n      headers.append('expiry', this.atCurrentAuthData.expiry);\n      headers.append('token-type', this.atCurrentAuthData.tokenType);\n      headers.append('uid', this.atCurrentAuthData.uid);\n    }\n\n    Object.keys(this.atOptions.globalOptions.headers).forEach(\n      (key) => headers.append(key, this.atOptions.globalOptions.headers[key])\n    );\n\n    return headers;\n  }\n\n  // // Construct and send Http request\n  // request(options: RequestOptionsArgs): Observable<Response> {\n  //\n  //     let baseRequestOptions: RequestOptions;\n  //     let baseHeaders:        { [key:string]: string; } = this.atOptions.globalOptions.headers;\n  //\n  //     // Get auth data from local storage\n  //     this.getAuthDataFromStorage();\n  //\n  //     // Merge auth headers to request if set\n  //     if (this.atCurrentAuthData != null) {\n  //         (<any>Object).assign(baseHeaders, {\n  //             'access-token': this.atCurrentAuthData.accessToken,\n  //             'client':       this.atCurrentAuthData.client,\n  //             'expiry':       this.atCurrentAuthData.expiry,\n  //             'token-type':   this.atCurrentAuthData.tokenType,\n  //             'uid':          this.atCurrentAuthData.uid\n  //         });\n  //     }\n  //\n  //     baseRequestOptions = new RequestOptions({\n  //         headers: new Headers(baseHeaders)\n  //     });\n  //\n  //     // Merge standard and custom RequestOptions\n  //     baseRequestOptions = baseRequestOptions.merge(options);\n  //\n  //     let response = this.http.request(new Request(baseRequestOptions)).share();\n  //     this.handleResponse(response);\n  //\n  //     return response;\n  // }\n  //\n  // private mergeRequestOptionsArgs(options: RequestOptionsArgs, addOptions?: RequestOptionsArgs): RequestOptionsArgs {\n  //\n  //     let returnOptions: RequestOptionsArgs = options;\n  //\n  //     if (options)\n  //         (<any>Object).assign(returnOptions, addOptions);\n  //\n  //     return returnOptions;\n  // }\n\n  // Check if response is complete and newer, then update storage\n  private handleResponse(request: Observable<any>): void {\n    request.subscribe(res => {\n      this.getAuthHeadersFromResponse(<any>res);\n    }, error => {\n      this.getAuthHeadersFromResponse(<any>error);\n    });\n  }\n\n  /**\n   *\n   * Get Auth Data\n   *\n   */\n\n  // Try to load auth data\n  private tryLoadAuthData(): void {\n\n    const userType = this.getUserTypeByName(localStorage.getItem('userType'));\n\n    if (userType) {\n      this.atCurrentUserType = userType;\n    }\n\n    this.getAuthDataFromStorage();\n\n    if (this.activatedRoute) {\n      this.getAuthDataFromParams();\n    }\n\n    if (this.atCurrentAuthData) {\n      this.validateToken();\n    }\n  }\n\n  // Parse Auth data from response\n  private getAuthHeadersFromResponse(data: any): void {\n    const headers = data.headers;\n    const authData: AuthData = {\n      accessToken:    headers.get('access-token'),\n      client:         headers.get('client'),\n      expiry:         headers.get('expiry'),\n      tokenType:      headers.get('token-type'),\n      uid:            headers.get('uid')\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Parse Auth data from post message\n  private getAuthDataFromPostMessage(data: any): void {\n    const authData: AuthData = {\n      accessToken:    data['auth_token'],\n      client:         data['client_id'],\n      expiry:         data['expiry'],\n      tokenType:      'Bearer',\n      uid:            data['uid']\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Try to get auth data from storage.\n  private getAuthDataFromStorage(): void {\n    const authData: AuthData = {\n      accessToken:    localStorage.getItem('accessToken'),\n      client:         localStorage.getItem('client'),\n      expiry:         localStorage.getItem('expiry'),\n      tokenType:      localStorage.getItem('tokenType'),\n      uid:            localStorage.getItem('uid')\n    };\n\n    if (this.checkAuthData(authData)) {\n      this.atCurrentAuthData = authData;\n    }\n  }\n\n  // Try to get auth data from url parameters.\n  private getAuthDataFromParams(): void {\n    if (this.activatedRoute.queryParams) { // Fix for Testing, needs to be removed later\n      this.activatedRoute.queryParams.subscribe(queryParams => {\n        const authData: AuthData = {\n          accessToken: queryParams['token'] || queryParams['auth_token'],\n          client: queryParams['client_id'],\n          expiry: queryParams['expiry'],\n          tokenType: 'Bearer',\n          uid: queryParams['uid']\n        };\n\n        if (this.checkAuthData(authData)) {\n          this.atCurrentAuthData = authData;\n        }\n      });\n    }\n  }\n\n  /**\n   *\n   * Set Auth Data\n   *\n   */\n\n  // Write auth data to storage\n  private setAuthData(authData: AuthData): void {\n    if (this.checkAuthData(authData)) {\n      this.atCurrentAuthData = authData;\n\n      localStorage.setItem('accessToken', authData.accessToken);\n      localStorage.setItem('client', authData.client);\n      localStorage.setItem('expiry', authData.expiry);\n      localStorage.setItem('tokenType', authData.tokenType);\n      localStorage.setItem('uid', authData.uid);\n\n      if (this.atCurrentUserType != null) {\n        localStorage.setItem('userType', this.atCurrentUserType.name);\n      }\n    }\n  }\n\n  /**\n   *\n   * Validate Auth Data\n   *\n   */\n\n  // Check if auth data complete and if response token is newer\n  private checkAuthData(authData: AuthData): boolean {\n    if (\n      authData.accessToken != null &&\n      authData.client != null &&\n      authData.expiry != null &&\n      authData.tokenType != null &&\n      authData.uid != null\n    ) {\n      if (this.atCurrentAuthData != null) {\n        return authData.expiry >= this.atCurrentAuthData.expiry;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   *\n   * Construct Paths / Urls\n   *\n   */\n\n  private getUserPath(): string {\n    if (this.atCurrentUserType == null) {\n      return '';\n    } else {\n      return this.atCurrentUserType.path + '/';\n    }\n  }\n\n  private getApiPath(): string {\n    let constructedPath = '';\n\n    if (this.atOptions.apiBase != null) {\n      constructedPath += this.atOptions.apiBase + '/';\n    }\n\n    if (this.atOptions.apiPath != null) {\n      constructedPath += this.atOptions.apiPath + '/';\n    }\n\n    return constructedPath;\n  }\n\n  private getOAuthPath(oAuthType: string): string {\n    let oAuthPath: string;\n\n    oAuthPath = this.atOptions.oAuthPaths[oAuthType];\n\n    if (oAuthPath == null) {\n      oAuthPath = '/auth/${oAuthType}';\n    }\n\n    return oAuthPath;\n  }\n\n  private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string): string {\n    let url: string;\n\n    url =   '${this.atOptions.oAuthBase}/${oAuthPath}';\n    url +=  '?omniauth_window_type=${windowType}';\n    url +=  '&auth_origin_url=${encodeURIComponent(callbackUrl)}';\n\n    if (this.atCurrentUserType != null) {\n      url += '&resource_class=${this.atCurrentUserType.name}';\n    }\n\n    return url;\n  }\n\n  /**\n   *\n   * OAuth\n   *\n   */\n\n  private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n    const pollerObserv = Observable.interval(500);\n\n    const responseObserv = Observable.fromEvent(window, 'message').pluck('data')\n      .filter(this.oAuthWindowResponseFilter);\n\n    const responseSubscription = responseObserv.subscribe(\n      this.getAuthDataFromPostMessage.bind(this)\n    );\n\n    const pollerSubscription = pollerObserv.subscribe(() => {\n      if (authWindow.closed) {\n        pollerSubscription.unsubscribe();\n      } else {\n        authWindow.postMessage('requestCredentials', '*');\n      }\n    });\n\n    return responseObserv;\n  }\n\n  private oAuthWindowResponseFilter(data: any): any {\n    if (data.message === 'deliverCredentials' || data.message === 'authFailure') {\n      return data;\n    }\n  }\n\n  /**\n   *\n   * Utilities\n   *\n   */\n\n  // Match user config by user config name\n  private getUserTypeByName(name: string): UserType {\n    if (name == null || this.atOptions.userTypes == null) {\n      return null;\n    }\n\n    return this.atOptions.userTypes.find(\n      userType => userType.name === name\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { AuthTokenService } from './auth-token.service';\n\n@Injectable()\nexport class AuthTokenInterceptor implements HttpInterceptor {\n  constructor(public authTokenService: AuthTokenService ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.authTokenService.setCurrentAuthHeaders();\n\n    const authHeaders = this.authTokenService.currentAuthHeaders;\n    authHeaders.keys().forEach((key) => req.headers.append(key, authHeaders.get(key)));\n\n    const authReq = req.clone({ headers: req.headers });\n\n    return next.handle(authReq);\n  }\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf, Provider, InjectionToken } from '@angular/core';\nimport { AuthTokenInterceptor } from './auth-token.interceptor';\nimport { AuthTokenService } from './auth-token.service';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AuthTokenOptions } from './auth-token.model';\nimport { AUTH_TOKEN_OPTIONS } from './auth-token.options';\n\nexport * from './auth-token.interceptor';\nexport * from './auth-token.service';\nexport * from './auth-token.model';\nexport * from './auth-token.options';\n\n\nexport interface TokenAuthModuleOptions {\n  authTokenOptionsProvider?: Provider;\n  config?: AuthTokenOptions;\n}\n\n@NgModule()\nexport class AuthTokenModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: AuthTokenModule) {\n    if (parentModule) {\n      throw new Error('AuthTokenModule is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n\n  static forRoot(options: TokenAuthModuleOptions): ModuleWithProviders {\n    return {\n      ngModule: AuthTokenModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AuthTokenInterceptor,\n          multi: true\n        },\n        options.authTokenOptionsProvider ||\n        {\n          provide: AUTH_TOKEN_OPTIONS,\n          useValue: options.config\n        },\n        AuthTokenService\n      ]\n    };\n  }\n}\n"],"names":["AUTH_TOKEN_OPTIONS","InjectionToken","exports","AuthTokenService","http","config","activatedRoute","router","this","defaultOptions","apiPath","apiBase","signInPath","signInRedirect","signInStoredUrlStorageKey","signOutPath","validateTokenPath","signOutFailedValidate","registerAccountPath","deleteAccountPath","registerAccountCallback","window","location","href","updatePasswordPath","resetPasswordPath","resetPasswordCallback","userTypes","oAuthBase","origin","oAuthPaths","github","oAuthCallbackPath","oAuthWindowType","oAuthWindowOptions","globalOptions","headers","Content-Type","Accept","atOptions","Object","assign","defineProperty","prototype","get","atCurrentUserType","name","atCurrentUserData","atCurrentAuthData","HttpHeaders","access-token","accessToken","client","expiry","token-type","tokenType","uid","userSignedIn","canActivate","localStorage","setItem","pathname","search","navigate","init","options","tryLoadAuthData","registerAccount","registerData","userType","getUserTypeByName","password_confirmation","passwordConfirmation","confirm_success_url","post","getUserPath","JSON","stringify","deleteAccount","delete","signIn","signInData","_this","body","email","password","observ","subscribe","res","json","data","_error","signInOAuth","oAuthType","oAuthPath","getOAuthPath","authUrl","getOAuthUrl","popup","open","requestCredentialsViaPostMessage","processOAuthCallback","getAuthDataFromParams","signOut","removeItem","validateToken","error","status","updatePassword","updatePasswordData","args","passwordCurrent","current_password","resetPasswordToken","reset_password_token","put","resetPassword","resetPasswordData","redirect_url","url","response","getApiPath","share","handleResponse","patch","head","setCurrentAuthHeaders","getAuthDataFromStorage","append","keys","forEach","key","request","getAuthHeadersFromResponse","getItem","authData","setAuthData","getAuthDataFromPostMessage","checkAuthData","queryParams","path","constructedPath","callbackUrl","windowType","authWindow","pollerObserv","Observable","interval","responseObserv","fromEvent","pluck","filter","oAuthWindowResponseFilter","pollerSubscription","bind","closed","unsubscribe","postMessage","message","find","__decorate","Injectable","__param","Inject","HttpClient","Optional","ActivatedRoute","Router","__metadata","AuthTokenInterceptor","authTokenService","intercept","req","next","authHeaders","currentAuthHeaders","authReq","clone","handle","AuthTokenModule","AuthTokenModule_1","parentModule","Error","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","authTokenOptionsProvider","useValue","NgModule","SkipSelf"],"mappings":"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"}
